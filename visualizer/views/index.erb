<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>D3 Page Template</title>
    <script type="text/javascript" src="/d3/d3.v3.js"></script>
    <link rel="stylesheet" type="text/css" href="/colorbrewer/colorbrewer.css">
    <style type="text/css">
      svg {
        font: 10px sans-serif;
      }
      .axis path,
      .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
      }
      div.bar {
        display: inline-block;
        width: 20px;
        height: 75px;
        background-color: teal;
        margin-right: 2px;
      }
      rect {
        -moz-transition: all 0.3s;
        -o-transition: all 0.3s;
        -webkit-transition: all 0.3s;
        transition: all 0.3s;
      }
      rect:hover {
        fill: orange;
      }
      #tooltip {
        position: absolute;
        width: 200px;
        height: auto;
        padding: 10px;
        background-color: white;
        -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
        border-radius: 10px;
        -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        pointer-events: none;
      }
      #tooltip.hidden {
        display: none;
      }
      #tooltip p {
        margin: 0;
        font-family: sans-serif;
        font-size: 16px;
        line-height: 20px;
      }
    </style>
    <body>
      <div id="tooltip" class="hidden">
        <p><strong><%=current_fact%></strong></p>
        <p><span id="timestamp">100</span></p>
        <p><span id="value">100</span></p>
      </div>
      <script type="text/javascript">
        var socket = new WebSocket('ws://'+window.location.host + '/subscribe/<%=current_fact%>');

        //Callbacks
        socket.onopen = function(evt) {
        };

        socket.onclose = function(evt) {
        };
        
        var margin = { top: 10, right: 10, bottom: 20, left: 50 };
        var w = 600 - margin.left - margin.right;
        var h = 250 - margin.top - margin.bottom;
        
        var maxValue = 25;
        
        var sortOrder = false;
        
        var normalize = false;

        var svg = d3.select("body")
                    .append("svg")
                    .attr("width", w)
                    .attr("height", h);
                    
        var chart = svg.append("g")
                       .attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
        chart.classed("Blues", true);

        var xScale = d3.scale.ordinal()
                       .rangeRoundBands([0, w], 0.05);
        var yNormalize = d3.scale.linear().range([0.05, 1]);
        var yScale = d3.scale.pow().exponent(.75)
                             .domain([0, 1])
                             .range([h, 0]);
        var yAxis = d3.svg.axis().scale(yScale).orient("left");

        var colorScale = d3.scale.quantile().range(d3.range(4,9));

        var key = function(d) {
          return new Date(parseFloat(d[0])*1000);
        }

        var value = function(d) {
          return parseFloat(d[1]);
        }
        
        var timeFormat = d3.time.format("%c");

        var duration = 1000;
        var ease = "cubic-in-out";
        
        var height = function(d) {
          return h - ( normalize ? yScale(yNormalize(value(d))) : yScale(value(d)) );
        }
        
        var yStart = function(d) {
          return ( normalize ? yScale(yNormalize(value(d))) : yScale(value(d)) );
        }
        
        var updateDomains = function(dataset) {
          xScale.domain(d3.range(dataset.length));
          if (normalize) {
            yNormalize.domain(d3.extent(dataset, value));
          } else {
            var min = d3.min(dataset, value);
            var max = d3.max(dataset, value);
            var diff = max - min;
            if (max < h) min = 0;
            
            yScale.domain([min * .998, max]).nice();
          }
          colorScale.domain(dataset.map(value));
        }
        
        d3.json("/fact/<%= current_fact%>", function(dataset) {
          dataset.sort(function(a,b) {return d3.ascending(key(a), key(b)); });
          socket.onmessage = function(evt) {
            dataset.push(JSON.parse(evt.data));
            dataset.shift();

            updateDomains(dataset);
            
            var bars = chart.selectAll("rect")
                            .data(dataset, key);
            bars.exit()
                .transition()
                .attr("x", -xScale.rangeBand())
                .remove();

            bars.enter()
                .append("rect")
                .attr("x", w)
                .attr("y", yStart)
                .attr("width", xScale.rangeBand())
                .attr("height", height)
                .attr("class", function(d) { return "q"+colorScale(value(d))+"-9";})
                .on("click", function(d) {
                  sortBars();
                })
                .on("mouseover", function(d) {
                  var xPosition = parseFloat(d3.select(this).attr("x")) + xScale.rangeBand() / 2;
                  var yPosition = parseFloat(d3.select(this).attr("y")) / 2 + h / 2;

                  var tooltip = d3.select("#tooltip")
                    .style("left", xPosition + "px")
                    .style("top", yPosition + "px");

                  tooltip.select("#value")
                    .text(value(d));
                  tooltip.select("#timestamp")
                    .text(timeFormat(key(d)));

                  d3.select("#tooltip").classed("hidden", false);

                })
                .on("mouseout", function() {
                  d3.select("#tooltip").classed("hidden", true);
                });
            
            bars.transition()
                .duration(duration)
                .attr("x", function(d, i){
                  return xScale(i);
                })
                .attr("y", yStart)
                .attr("width", xScale.rangeBand())
                .attr("height", height)
                .attr("class", function(d) { return "q"+colorScale(value(d))+"-9";});
          };

          updateDomains(dataset);

          chart.append("g")
             .attr("class", "x axis")
             .call(yAxis);

          chart.selectAll("rect")
           .data(dataset, key)
           .enter()
           .append("rect")
           .attr("x", function(d, i){
             return xScale(i);
           })
           .attr("y", yStart)
           .attr("width", xScale.rangeBand())
           .attr("height", height)
           .sort(function(a,b) { return d3.descending(key(a), key(b));} )
           .attr("class", function(d) { return "q"+colorScale(value(d))+"-9";})
           .on("click", function(d) {
             sortBars();
           })
           .on("mouseover", function(d) {
             var xPosition = parseFloat(d3.select(this).attr("x")) + xScale.rangeBand() / 2;
             var yPosition = parseFloat(d3.select(this).attr("y")) / 2 + h / 2;

             var tooltip = d3.select("#tooltip")
               .style("left", xPosition + "px")
               .style("top", yPosition + "px");

             tooltip.select("#value")
               .text(value(d));
             tooltip.select("#timestamp")
               .text(timeFormat(key(d)));

             d3.select("#tooltip").classed("hidden", false);

           })
           .on("mouseout", function() {
             d3.select("#tooltip").classed("hidden", true);
           });
        });

        var sortBars = function() {
          sortOrder = !sortOrder;
          
          chart.selectAll("rect")
             .sort(function(a, b) {
               if (sortOrder) {
                 return d3.ascending(value(a), value(b));
               } else {
                 return d3.descending(value(a), value(b));
               }
             })
             .transition()
             .delay(function(d, i) {
               return i * 50;
             })
             .duration(1000)
             .attr("x", function(d, i) {
               return xScale(i);
             });
          };
      </script>
      <div></div>
    </body>
  </head>
</html>
